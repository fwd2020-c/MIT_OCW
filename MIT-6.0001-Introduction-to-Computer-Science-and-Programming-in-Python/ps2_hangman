# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"


def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist



def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()


def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    for char in secret_word:
        if char not in letters_guessed:
            return False
    return True
                
            

def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    guessed_word = ''
    for char in secret_word:
        if char not in letters_guessed:
            guessed_word += '_ '
        else:
            guessed_word += char
    return guessed_word



def get_available_letters(letters_guessed):
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    import string
    all_letters = string.ascii_lowercase
    available_letters = ''
    
    for char in all_letters:
        if char not in letters_guessed:
            available_letters += char
    return available_letters

def unique_letters(secret_word):
    '''
    secret_word: string, the secret word to guess.
    returns: integer, the counts of unqiue letters of the secret word.
    '''    
    letters = ''
    for char in secret_word:
        if char not in letters:
            letters += char
    return len(letters)
    

def hangman(secret_word):
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"
    wordlist = load_words()
    random_word = choose_word(wordlist)
    print('Welcome to the game Hangman!')
    print('I am thinking of a word that is', len(random_word), 'letters long.')
    max_guess = 6
    max_warning = 3
    letters_guessed = [] 
    vowels = 'aeiou'
    while max_guess >= 1 and not is_word_guessed(secret_word, letters_guessed):
        print('You have', max_guess  , 'guesses left.')
        available_letters = get_available_letters(letters_guessed)
        print('Available letters:', available_letters)
        letter_guessed = input('Please guess a letter: ').lower()
        letters_guessed += [letter_guessed]
        guessed_word = get_guessed_word(secret_word, letters_guessed)
        if letter_guessed in secret_word and letter_guessed in available_letters:
            print('Good guess:', guessed_word)
        elif letter_guessed not in available_letters and str.isalpha(letter_guessed) == True:
            if max_warning > 0:
                max_warning -= 1
                if max_warning > 1:
                     print("Oops! You've already guessed that letter. You now have", max_warning, "warnings left:", guessed_word)
                else:
                     print("Oops! You've already guessed that letter. You now have", max_warning, "warning left:", guessed_word)
            else:
                max_guess -= 1
                print("Oops! You've already guessed that letter. You now have", max_warning, "warning left so you lose one guess:", guessed_word)
           
        elif str.isalpha(letter_guessed) == False:
            if max_warning > 0:
               max_warning -= 1
               if max_warning > 1:
                   print('Oops! That is not a valid letter. You have', max_warning, 'warnings left:', guessed_word)
               else:
                   print('Oops! That is not a valid letter. You have', max_warning, 'warning left:', guessed_word)
            else:
                max_guess -= 1
                print('Oops! That is not a valid letter. You have', max_warning, 'warning left so you lose one guess:', guessed_word)
        else:
            print('Oops! That letter is not in my word', guessed_word)
            if letter_guessed in vowels:
                max_guess -= 2
            else:
                max_guess -= 1
        print('------------------')
    if is_word_guessed(secret_word, letters_guessed):
        print('Congratualtions, you won!')
        total_score = max_guess * unique_letters(secret_word)
        print('Your total score:', total_score)
    else:
        print('Sorry, you went out of guesses. The word was ' + secret_word + '.')


    # To test, uncomment the following two lines.
    
    # secret_word = choose_word(wordlist)
    # hangman(secret_word)
